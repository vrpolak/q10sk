# TODO: Add formatting.

Few notes.

No specific code for end of program, instead the backtick symbol
acts as such when there is not enough items to combine.

Implementing integers is much more work than needed.
Instead, stack also contains "backtick implementations",
the deepest one starting the program.

Supporting empty programs makes the loader more complicated,
but also makes the serialized programs less surprising.
As a compromise, the program serialization will work
as if empty programs are supported,
even if loader halts in a different way on empty program.

Deserialization has two phases. Backtick detection and leaf deserialization.

Loader program has to contain both backtick implementations,
so it is easier to have "run" at the bottom of the stack,
and pass "combine" as an argument.
Every time a leaf is deselialized,
the combine backtick implementation is then added to the stack.
From bottom of stack: backtick_run, fist_item, backtick_combine, second item, ...

As the stack will be deep for long programs,
it is best to keep the backtick items as lightweight as possible,
and the lightest is the switch. K for combine `SK = `K`SKS = `K``SKS for run.

There will be a main loop, programmed a M=`mm so m can be used to construct new M.
As turning m into M needs a long combinator,
it is best to be applied as soon as possible,
even at the cost of taking more memory.

For leaf encoding, a less than obvious schema is used
(the benefit will be visible later):
' = 0
K = 11
S = 100
Q = 1010
0 = 10110
1 = 10111

Leaf decoder (without continuation): {``Q(a)[b]}
{``Q({``Q(S)[{``Q(Q)[{``Q(0)[1]}]]})[K]}
With continuation:
`Lc = {``Q({``Q(`cS)[{``Q(`cQ)[{``Q(`c0)[`c1]}]]})[`cK]}
`Lc = ``Q``Q`cS``Q`cQ``Q`c0`c1`cK
L = ``S``S`KQ``S``S`KQ``S``SKK`KS``S``S`KQ``S``SKK`KQ``S``S`KQ``S``SKK`K0``S``SKK`K1``S``SKK`KK

For data layout, most of the time there should always be i/j/k between a/b and M,
The exception to this rule is backtick implementation caller,
as both implementation ignore the toppest impl.
If "i" is the real combine function, "r" the run function and "j" the selector, we have:
`````CMkajb = ``````jirMajb
````CMkaj = `````jirMaj
C = ``S`KK``S``S`KS``S`K`S`KS``S``S`KS``S`KK``S`KS``S`K`S``S``S``SKK`Ki`KrK`KK`K`SK

Real combine implementation of backtick:
````iMajb = ``MK`ab
i = ``S`K`S`KK``S`KS``S`KK``S``SKK`KK

Real run implementation needs to be:
```rMaR = a
r = `KK

For debugs substituted all:
C = ``S`KK``S``S`KS``S`K`S`KS``S``S`KS``S`KK``S`KS``S`K`S``S``S``SKK`Ki`KrK`KK`K`SK
C = ``S`KK``S``S`KS``S`K`S`KS``S``S`KS``S`KK``S`KS``S`K`S``S``S``SKK`Ki`K`KKK`KK`K`SK
C = ``S`KK``S``S`KS``S`K`S`KS``S``S`KS``S`KK``S`KS``S`K`S``S``S``SKK`K``S`K`S`KK``S`KS``S`KK``S``SKK`KK`K`KKK`KK`K`SK

The main loop:
````mnkaj = `````Q`C`nn`L``nnKkaj
```mnka = ````Q`C`nn`L``nnKka
``mnk = ```Q`C`nn`L``nnKk
`mn = ``Q`C`nn`L``nnK
m = ``S``S`KQ``S`KC``S``SKK``SKK``S`KL``S``S``SKK``SKK`KK

For debugs substituted all:
m = ``S``S`KQ``S`KC``S``SKK``SKK``S`KL``S``S``SKK``SKK`KK
m = ``S``S`KQ``S`KC``S``SKK``SKK``S`K``S``S`KQ``S``S`KQ``S``SKK`KS``S``S`KQ``S``SKK`KQ``S``S`KQ``S``SKK`K0``S``SKK`K1``S``SKK`KK``S``S``SKK``SKK`KK
m = ``S``S`KQ``S`K``S`KK``S``S`KS``S`K`S`KS``S``S`KS``S`KK``S`KS``S`K`S``S``S``SKK`K``S`K`S`KK``S`KS``S`KK``S``SKK`KK`K`KKK`KK`K`SK``S``SKK``SKK``S`K``S``S`KQ``S``S`KQ``S``SKK`KS``S``S`KQ``S``SKK`KQ``S``S`KQ``S``SKK`K0``S``SKK`K1``S``SKK`KK``S``S``SKK``SKK`KK

M = `mm = ```SIIm
M = ```S``SKK``SKKm
M = ```S``SKK``SKK``S``S`KQ``S`K``S`KK``S``S`KS``S`K`S`KS``S``S`KS``S`KK``S`KS``S`K`S``S``S``SKK`K``S`K`S`KK``S`KS``S`KK``S``SKK`KK`K`KKK`KK`K`SK``S``SKK``SKK``S`K``S``S`KQ``S``S`KQ``S``SKK`KS``S``S`KQ``S``SKK`KQ``S``S`KQ``S``SKK`K0``S``SKK`K1``S``SKK`KK``S``S``SKK``SKK`KK

Now, header considerations. As multiple encodings are possible, we want to include the loader program to show which encoding is used.
But it could be unclear where the loader ends, so we prepend loader twice.
For that to correctly specify the loader, its encoding should not contain two repeated segments at the start.
As our loader loads from argument side, current code with `SK as run switch does not work,
and it will not easily work with any "one-bit `, two-bit K" scheme.
We can cheat by realizing `SK is `KI and using ``SKS instead of ``SKK for I:
R := `KI = `K``SKS
``Rna = ``(`K``SKS)na = `(``K ``SKS n)a = `(``SKS)a = ``Ka`Sa = a
In the straigthforward encodng scheme, code for S would be 110 which repeats 1.
And that explains why we flipped that bit to encode S as 100.
P = `MR
P = `M`K``SKS
*P = ````S``SKK``SKK``S``S`KQ``S`K``S`KK``S``S`KS``S`K`S`KS``S``S`KS``S`KK``S`KS``S`K`S``S``S``SKK`K``S`K`S`KK``S`KS``S`KK``S``SKK`KK`K`KKK`KK`K`SK``S``SKK``SKK``S`K``S``S`KQ``S``S`KQ``S``SKK`KS``S``S`KQ``S``SKK`KQ``S``S`KQ``S``SKK`K0``S``SKK`K1``S``SKK`KK``S``S``SKK``SKK`KK`K``SKS
Serialized (single copy):
100111000011011110111110000111110000100001000011110111110000100001011111011111000010000101101101111100001000010101101000010000101011011111000010000101011010000100001001101111100001000010101101000010000101011010000100001101000011111000011111000010000111000110111101111110110111101111100001000011110100001001101000011110100011010000110111110000100001000010001101000010011010000111101000010011010000100001001101000110100001001101000010000111101000011010000101011010000100001111100001111100001000000
(495 bits, fits nonexactly into 62 bytes, two copies into 124.)

As expected, ``SKS from the end never repeats in reasonable programs, but "10011100" of course can appear in binary imput of the said program.
The loader does not even contain another copy of "100111".

# TODO: Turn all of the above into a coherent text document.

# TODO: Add tests to confirm the loader works as intended.
